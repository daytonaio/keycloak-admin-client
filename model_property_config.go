/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloak_admin_client

import (
	"encoding/json"
)

// checks if the PropertyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyConfig{}

// PropertyConfig struct for PropertyConfig
type PropertyConfig struct {
	Applicable *bool `json:"applicable,omitempty"`
	Value interface{} `json:"value,omitempty"`
}

// NewPropertyConfig instantiates a new PropertyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyConfig() *PropertyConfig {
	this := PropertyConfig{}
	return &this
}

// NewPropertyConfigWithDefaults instantiates a new PropertyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyConfigWithDefaults() *PropertyConfig {
	this := PropertyConfig{}
	return &this
}

// GetApplicable returns the Applicable field value if set, zero value otherwise.
func (o *PropertyConfig) GetApplicable() bool {
	if o == nil || IsNil(o.Applicable) {
		var ret bool
		return ret
	}
	return *o.Applicable
}

// GetApplicableOk returns a tuple with the Applicable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyConfig) GetApplicableOk() (*bool, bool) {
	if o == nil || IsNil(o.Applicable) {
		return nil, false
	}
	return o.Applicable, true
}

// HasApplicable returns a boolean if a field has been set.
func (o *PropertyConfig) HasApplicable() bool {
	if o != nil && !IsNil(o.Applicable) {
		return true
	}

	return false
}

// SetApplicable gets a reference to the given bool and assigns it to the Applicable field.
func (o *PropertyConfig) SetApplicable(v bool) {
	o.Applicable = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PropertyConfig) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PropertyConfig) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PropertyConfig) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *PropertyConfig) SetValue(v interface{}) {
	o.Value = v
}

func (o PropertyConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Applicable) {
		toSerialize["applicable"] = o.Applicable
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePropertyConfig struct {
	value *PropertyConfig
	isSet bool
}

func (v NullablePropertyConfig) Get() *PropertyConfig {
	return v.value
}

func (v *NullablePropertyConfig) Set(val *PropertyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyConfig(val *PropertyConfig) *NullablePropertyConfig {
	return &NullablePropertyConfig{value: val, isSet: true}
}

func (v NullablePropertyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


