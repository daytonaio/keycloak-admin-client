/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloak_admin_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ClientRoleMappingsAPIService ClientRoleMappingsAPI service
type ClientRoleMappingsAPIService service

type ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetRequest struct {
	ctx        context.Context
	ApiService *ClientRoleMappingsAPIService
	realm      string
	groupId    string
	clientId   string
}

func (r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet Get available client-level roles that can be mapped to the user or group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet(ctx context.Context, realm string, groupId string, clientId string) ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetRequest {
	return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		clientId:   clientId,
	}
}

// Execute executes the request
//
//	@return	[]RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetExecute(r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/available"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest struct {
	ctx                 context.Context
	ApiService          *ClientRoleMappingsAPIService
	realm               string
	groupId             string
	clientId            string
	briefRepresentation *bool
}

// if false, return roles with their attributes
func (r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest) BriefRepresentation(briefRepresentation bool) ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest {
	r.briefRepresentation = &briefRepresentation
	return r
}

func (r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet Get effective client-level role mappings This recurses any composite roles

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet(ctx context.Context, realm string, groupId string, clientId string) ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest {
	return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		clientId:   clientId,
	}
}

// Execute executes the request
//
//	@return	[]RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetExecute(r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/composite"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.briefRepresentation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "briefRepresentation", r.briefRepresentation, "form", "")
	} else {
		var defaultValue bool = true
		r.briefRepresentation = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest struct {
	ctx                context.Context
	ApiService         *ClientRoleMappingsAPIService
	realm              string
	groupId            string
	clientId           string
	roleRepresentation *[]RoleRepresentation
}

func (r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete Delete client-level roles from user or group role mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete(ctx context.Context, realm string, groupId string, clientId string) ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest {
	return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		clientId:   clientId,
	}
}

// Execute executes the request
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteExecute(r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetRequest struct {
	ctx        context.Context
	ApiService *ClientRoleMappingsAPIService
	realm      string
	groupId    string
	clientId   string
}

func (r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet Get client-level role mappings for the user or group, and the app

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet(ctx context.Context, realm string, groupId string, clientId string) ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetRequest {
	return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		clientId:   clientId,
	}
}

// Execute executes the request
//
//	@return	[]RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetExecute(r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest struct {
	ctx                context.Context
	ApiService         *ClientRoleMappingsAPIService
	realm              string
	groupId            string
	clientId           string
	roleRepresentation *[]RoleRepresentation
}

func (r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost Add client-level roles to the user or group role mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost(ctx context.Context, realm string, groupId string, clientId string) ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest {
	return ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		clientId:   clientId,
	}
}

// Execute executes the request
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostExecute(r ApiAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetRequest struct {
	ctx        context.Context
	ApiService *ClientRoleMappingsAPIService
	realm      string
	userId     string
	clientId   string
}

func (r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet Get available client-level roles that can be mapped to the user or group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet(ctx context.Context, realm string, userId string, clientId string) ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetRequest {
	return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		clientId:   clientId,
	}
}

// Execute executes the request
//
//	@return	[]RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetExecute(r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/available"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest struct {
	ctx                 context.Context
	ApiService          *ClientRoleMappingsAPIService
	realm               string
	userId              string
	clientId            string
	briefRepresentation *bool
}

// if false, return roles with their attributes
func (r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest) BriefRepresentation(briefRepresentation bool) ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest {
	r.briefRepresentation = &briefRepresentation
	return r
}

func (r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet Get effective client-level role mappings This recurses any composite roles

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet(ctx context.Context, realm string, userId string, clientId string) ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest {
	return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		clientId:   clientId,
	}
}

// Execute executes the request
//
//	@return	[]RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetExecute(r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/composite"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.briefRepresentation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "briefRepresentation", r.briefRepresentation, "form", "")
	} else {
		var defaultValue bool = true
		r.briefRepresentation = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest struct {
	ctx                context.Context
	ApiService         *ClientRoleMappingsAPIService
	realm              string
	userId             string
	clientId           string
	roleRepresentation *[]RoleRepresentation
}

func (r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete Delete client-level roles from user or group role mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete(ctx context.Context, realm string, userId string, clientId string) ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest {
	return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		clientId:   clientId,
	}
}

// Execute executes the request
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteExecute(r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetRequest struct {
	ctx        context.Context
	ApiService *ClientRoleMappingsAPIService
	realm      string
	userId     string
	clientId   string
}

func (r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet Get client-level role mappings for the user or group, and the app

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet(ctx context.Context, realm string, userId string, clientId string) ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetRequest {
	return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		clientId:   clientId,
	}
}

// Execute executes the request
//
//	@return	[]RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetExecute(r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest struct {
	ctx                context.Context
	ApiService         *ClientRoleMappingsAPIService
	realm              string
	userId             string
	clientId           string
	roleRepresentation *[]RoleRepresentation
}

func (r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost Add client-level roles to the user or group role mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param clientId client id (not clientId!)
	@return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost(ctx context.Context, realm string, userId string, clientId string) ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest {
	return ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		clientId:   clientId,
	}
}

// Execute executes the request
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostExecute(r ApiAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
