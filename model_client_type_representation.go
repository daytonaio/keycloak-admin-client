/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloak_admin_client

import (
	"encoding/json"
)

// checks if the ClientTypeRepresentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientTypeRepresentation{}

// ClientTypeRepresentation struct for ClientTypeRepresentation
type ClientTypeRepresentation struct {
	Name     *string                    `json:"name,omitempty"`
	Provider *string                    `json:"provider,omitempty"`
	Parent   *string                    `json:"parent,omitempty"`
	Config   *map[string]PropertyConfig `json:"config,omitempty"`
}

// NewClientTypeRepresentation instantiates a new ClientTypeRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientTypeRepresentation() *ClientTypeRepresentation {
	this := ClientTypeRepresentation{}
	return &this
}

// NewClientTypeRepresentationWithDefaults instantiates a new ClientTypeRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientTypeRepresentationWithDefaults() *ClientTypeRepresentation {
	this := ClientTypeRepresentation{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClientTypeRepresentation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientTypeRepresentation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClientTypeRepresentation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClientTypeRepresentation) SetName(v string) {
	o.Name = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *ClientTypeRepresentation) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientTypeRepresentation) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *ClientTypeRepresentation) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *ClientTypeRepresentation) SetProvider(v string) {
	o.Provider = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ClientTypeRepresentation) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientTypeRepresentation) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ClientTypeRepresentation) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *ClientTypeRepresentation) SetParent(v string) {
	o.Parent = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ClientTypeRepresentation) GetConfig() map[string]PropertyConfig {
	if o == nil || IsNil(o.Config) {
		var ret map[string]PropertyConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientTypeRepresentation) GetConfigOk() (*map[string]PropertyConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ClientTypeRepresentation) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]PropertyConfig and assigns it to the Config field.
func (o *ClientTypeRepresentation) SetConfig(v map[string]PropertyConfig) {
	o.Config = &v
}

func (o ClientTypeRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientTypeRepresentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableClientTypeRepresentation struct {
	value *ClientTypeRepresentation
	isSet bool
}

func (v NullableClientTypeRepresentation) Get() *ClientTypeRepresentation {
	return v.value
}

func (v *NullableClientTypeRepresentation) Set(val *ClientTypeRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableClientTypeRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableClientTypeRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientTypeRepresentation(val *ClientTypeRepresentation) *NullableClientTypeRepresentation {
	return &NullableClientTypeRepresentation{value: val, isSet: true}
}

func (v NullableClientTypeRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientTypeRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
