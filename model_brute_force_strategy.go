/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloak_admin_client

import (
	"encoding/json"
	"fmt"
)

// BruteForceStrategy the model 'BruteForceStrategy'
type BruteForceStrategy string

// List of BruteForceStrategy
const (
	LINEAR BruteForceStrategy = "LINEAR"
	MULTIPLE BruteForceStrategy = "MULTIPLE"
)

// All allowed values of BruteForceStrategy enum
var AllowedBruteForceStrategyEnumValues = []BruteForceStrategy{
	"LINEAR",
	"MULTIPLE",
}

func (v *BruteForceStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BruteForceStrategy(value)
	for _, existing := range AllowedBruteForceStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BruteForceStrategy", value)
}

// NewBruteForceStrategyFromValue returns a pointer to a valid BruteForceStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBruteForceStrategyFromValue(v string) (*BruteForceStrategy, error) {
	ev := BruteForceStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BruteForceStrategy: valid values are %v", v, AllowedBruteForceStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BruteForceStrategy) IsValid() bool {
	for _, existing := range AllowedBruteForceStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BruteForceStrategy value
func (v BruteForceStrategy) Ptr() *BruteForceStrategy {
	return &v
}

type NullableBruteForceStrategy struct {
	value *BruteForceStrategy
	isSet bool
}

func (v NullableBruteForceStrategy) Get() *BruteForceStrategy {
	return v.value
}

func (v *NullableBruteForceStrategy) Set(val *BruteForceStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableBruteForceStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableBruteForceStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBruteForceStrategy(val *BruteForceStrategy) *NullableBruteForceStrategy {
	return &NullableBruteForceStrategy{value: val, isSet: true}
}

func (v NullableBruteForceStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBruteForceStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

