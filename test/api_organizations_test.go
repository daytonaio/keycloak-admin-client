/*
Keycloak Admin REST API

Testing OrganizationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package keycloak_admin_client

import (
	"context"
	"testing"

	openapiclient "github.com/daytonaio/daytona-ee-draft/pkg/keycloak-admin-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_keycloak_admin_client_OrganizationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdDelete(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdGet(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdIdentityProvidersAliasDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var alias string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdIdentityProvidersAliasDelete(context.Background(), realm, id, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdIdentityProvidersAliasGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var alias string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdIdentityProvidersAliasGet(context.Background(), realm, id, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdIdentityProvidersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdIdentityProvidersGet(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdIdentityProvidersPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdIdentityProvidersPost(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdMembersCountGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdMembersCountGet(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdMembersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdMembersGet(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdMembersInviteExistingUserPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdMembersInviteExistingUserPost(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdMembersInviteUserPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdMembersInviteUserPost(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdMembersPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdMembersPost(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdMembersUserIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var userId string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdMembersUserIdDelete(context.Background(), realm, id, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdMembersUserIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var userId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdMembersUserIdGet(context.Background(), realm, id, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdMembersUserIdOrganizationsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string
		var userId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdMembersUserIdOrganizationsGet(context.Background(), realm, id, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsIdPut(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsMembersIdOrganizationsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsMembersIdOrganizationsGet(context.Background(), realm, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsPost(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
