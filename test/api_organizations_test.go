/*
Keycloak Admin REST API

Testing OrganizationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package keycloak_admin_client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/daytonaio/keycloak-admin-client"
)

func Test_keycloak_admin_client_OrganizationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsMembersMemberIdOrganizationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var memberId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsMembersMemberIdOrganizationsGet(context.Background(), realm, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdDelete(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdGet(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string
		var alias string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete(context.Background(), realm, orgId, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string
		var alias string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet(context.Background(), realm, orgId, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdIdentityProvidersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdIdentityProvidersGet(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdIdentityProvidersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdIdentityProvidersPost(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdMembersCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdMembersCountGet(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdMembersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdMembersGet(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPost(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdMembersInviteUserPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdMembersInviteUserPost(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string
		var memberId string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete(context.Background(), realm, orgId, memberId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdMembersMemberIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string
		var memberId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdMembersMemberIdGet(context.Background(), realm, orgId, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string
		var memberId string

		resp, httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet(context.Background(), realm, orgId, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdMembersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdMembersPost(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsOrgIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var orgId string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsOrgIdPut(context.Background(), realm, orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AdminRealmsRealmOrganizationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		httpRes, err := apiClient.OrganizationsAPI.AdminRealmsRealmOrganizationsPost(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
